const express = require('express');
const fs = require('fs/promises');

const app = express();
const PORT = 3000;

const TODOS_FILE = 'todos.json';

async function loadTodos() {
  try {
    const data = await fs.readFile(TODOS_FILE, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    // File might not exist yet, that's okay
    return [];
  }
}

async function saveTodos() {
  await fs.writeFile(TODOS_FILE, JSON.stringify(todos, null, 2), 'utf-8');
}

// Middleware to parse JSON in the request body
app.use(express.json());

// Load todos from file on server start
let todos = loadTodos();

// Middleware to save todos to file after each request
app.use(async (req, res, next) => {
  await saveTodos();
  next();
});


// Get all todos
app.get('/todos', (req, res) => {
  res.status(200).json(todos);
});

// Get a specific todo by ID
app.get('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  const todo = todos.find(todo => todo.id === todoId);

  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).send('Not Found');
  }
});

// Create a new todo
app.post('/todos', (req, res) => {
  const newTodo = {
    id: todos.length + 1,
    title: req.body.title,
    description: req.body.description,
    completed: req.body.completed || false,
  };

  todos.push(newTodo);
  res.status(201).json({ id: newTodo.id });
});

// Update an existing todo by ID
app.put('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  const todoIndex = todos.findIndex(todo => todo.id === todoId);

  if (todoIndex !== -1) {
    todos[todoIndex] = {
      ...todos[todoIndex],
      ...req.body,
      id: todoId,
    };
    res.status(200).send('OK');
  } else {
    res.status(404).send('Not Found');
  }
});

// Delete a todo by ID
app.delete('/todos/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  todos = todos.filter(todo => todo.id !== todoId);

  res.status(200).send('OK');
});

// Handle 404 for any other routes
app.use((req, res) => {
  res.status(404).send('Not Found');
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
